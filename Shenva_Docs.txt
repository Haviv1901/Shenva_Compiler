
*******************
-------------------
*******************
              _                            _        
__      _____| | ___ ___  _ __ ___   ___  | |_ ___  
\ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | __/ _ \ 
 \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |
  \_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/ 
         ___| |__   ___ _ ____   ____ _| |          
        / __| '_ \ / _ \ '_ \ \ / / _` | |          
        \__ \ | | |  __/ | | \ V / (_| |_|          
        |___/_| |_|\___|_| |_|\_/ \__,_(_)          


*******************
-------------------
*******************

shenva is a compiled low level programming language with a 
high level feeling to it. It was created as a gateway language 
for python users to learn C, and it tries to combine the two languages into 
an easy to read syntax. The pourpuse of the language is to help high level 
programmers to get used to the syntax of C and C++, and to help them have a better
understanding of assembly, the stack, and pointers.


Our compiler can compile one file of shenva code into an exe. It supports variables,
conditions, loops functions, and pointers. Its also an open source project, so feel 
free to add features like includes and memory allocation.

lets reveiw how to code in shenva!





expressions:

basic calculation syntax and numeric expressions:


the calculation system in shenva is very similat to other programing languages.
The expressions are built from Absolute values, and from operators:

absolute values:
number: a number. example: 5
decimal: a decimal number. example: 3.5
letter: a letter. example: 'a'
true: a boolean value that translate to the number 1
false: a boolean value that translate to the number 0
identifier: an identifier of a variable. will be discussed in more detail later in this file. 


operators:
+: addition
-: subtruction
*: multiplication
/: division
%: modulu
(): parenthasis


here are some examples for expressions:
5
5 + 3
5 + 3 * 2 / (1 + 1)
2.5 + 3
'a' * 4.3 + 1
true * ('z' + 2 / 5.5 - false)

but what about input? well in shenva input is considerd a constant method, that behaves like an expression.
if i want an input I can use the intInput() expression, and then Ill have to enter an input.
there are 3 inputs in shenva: intInput(), floatInput(), and charInput(). and because they return a value (the value
you have entered), they are expressions and therefor can be used in any other expression.
for example:

5 + intInput() - will take your input and add 5 to it.


these types of expressions are callesd numeric expressions. they return the result that is made from the calculation.
but there are more types of expressions...






boolean expressions:

boolean expressions are expressions that instead of returning the result from a claculation, it returns a 0 or 1
depending on the outcome of the boolean calculation. if the expression is false, then 0 will be returned, and if
true then 1, or if to be more precise, a non 0 value.
this means that every numeric expression can be used as a boolean expression:
examples:
1 -> its not 0, so the boolean expression value is true.
1 - 1 -> this is 0, so the result value is false.
2 * 2 -> again, true.

but if we want to use a pure boolean expression in shenva, we need to use boolean operators.

boolean operators are:
== - checks if equal
!= - checks if not equal
> - checks if greater
< - checks if lesser
!> / <= - checks if not greater / lesser equals
!< / >= - checks if not lesser / greater equals


the way to write a pure boolean expression is in this format:

<numeric expression> <boolean operator> <numeric expression>
here are some examples:

1 == 1 -> returns 1 (true)
var != 0
var1 > var2 


boolean expressions are useally used in if statements, or in loops.










logical expressions:
similar to boolean expressions, logical expressions also return true or false, but they use boolean expressions as raw 
values. there are 3 logical operators:
! - not operator: preforms logical not.
or - or operator: preforms logical or.
and - and operator: preforms logical and.

the ! operator inverts the result of a boolean expression.
example:
!1 == 1 - returns 0 sience there is a not operator


the and and or operators takes two boolean expressions, and preforms the operation on their result.
examples:

var1 == var2 or var1 == 1 - this expression will return 1 if at least one of the 2 boolean expressions are true
var1 == var2 and var1 == 1 - this expression will return 1 only if both of the 2 boolean expressions are true





expressions can be written in the code just as they are, but they should useally be used in 
relation to another component.











void types: 


variable declerations:

when you write an expression it probobly passed to a command, in order to do something, and not just do a calculation 
and delete the end value. some of those commands or components are called void types.

while the expressions get raw values from you, like numbers, chars, or input constants, and return the end
value of the calculations, void types do not return anything, and can not be used like expressions
meaning that there can only be one void type in a line:

<void type> - will work
<void type> + <void type> - wont work.

one of the void types is declerations, and it works with hard defined types to make variables.
the types are:
int - a 32 bit non decimal signed number.
float - a 32 bit decimal signed number.
char - an 8 bit non decimal signed character.
bool - an 8 bit non decimal signed number, wich is treated as a boolean.

if i want to make a variable, it has to be in this format:


<void type decleration> <identifier> = <expression>.
examples:
int var = 5
int var = intInput()
float var = 2.3 + 5 + 6.9
char var = 'a'
bool var = false

the end value will alwyas be translated to the type of the decleration
meaning:

int var = 5.3 + 5 - will result in an integer variable named var with the value of 10

float var = 5.3 + 5 - will result in a float variable named var with the value of 10.3


chars and bools will also translate the same way an integer dose because there are no decimal chars or bools.

but if we wnat our variable to be uninitiallized? well, initiallized expression is optional
so we can remove it completely if we want to.
example:
int var
this always initiallizes the variable with the value of 0



ok so now we have created a variable, but how can we use it?
well its very simple: the identifier is an expression!
you can use it like any other expression from there on.

example:
int a = 5

char c = 'a' + a

in this example the char c will be 'f' because 'a' + 5 equals 'f'

if we want to make more than one variable in a line we can extend the functionallity of the
decleration with the comma extending habit:
int a = 1, b = 1, c = 1
this line actually creates 3 integers, a, b, and c. these variables are initiallized with the value of 1.











pointers:

in addition to normal declerations, there is a subcategory for pointers. 
pointers are a type of variables that has a value of a memory location. therough a pointer you can get
the values in that location, or change them.  its like a variable that points to another variable, or array of variables.

the pointer types are as follows:
pInt
pFloat
pBool
pChar

all of those types are techincally like normal integers, because the are 32 bit signed non decimal
value holders, but unlike integers, they can be used in more decleration types, and be used with memory manipulation
to make more specific expressions.

first of all, they are all can be declared with regular numeric expressions.
example:
int a = 5
pInt b = 5 - will work!

but more than that, there are some specifics...
first of all, pointers can be used also as arrays, and not just as pointing units to other variables.
if you want to initiallize an empty array you can use the index parenthesis like so:

pInt pi = [50] - pi now have the meory adress of the first int in this 50 int array, all of them are set to 0
pChar pc = [50] - pc now have the meory adress of the first char in this 50 char array, all of them are set to 0

take to mind that the value inside the index parenthasis must be a positive integer, or an error will occure.

but what if you want set values? you can use the List constant for that (|):

pInt pi = |1, 2, 3| - pi now have the memory adress of the first int with the value 1. those who came after has different values
pChar pc = |'a', 'b', 'c'| - pc now have the memory adress of the first char with the value 'a'

another important thing is the string. when declaring a pChar and only a pChar, you can use strings:
example:

pChar str = "hello"

in this example the string hello translates to |'h', 'e', 'l', 'l', 'o', 0|. wich is a normal null-terminated string







memory manipulation:

because identifiers are thecnicly raw values,
we can add these symbols before them for memory manipulation:

& - the ampersand is used to get the effective adress.
example:
int a = 1
&a - calculate the adress of a

^ - this is the dereference sign. it takes the value from the slot where the adress points to
this one specific sign can be stackd, meaning a double dereference is possible.
example:
int a = 15
pInt aP = &a
^aP - calculates 15
 
another example:
int a = 15
pInt aP = &a
pInt aPP = &ap
^^aPP - calculates 15
the second example is not very safe, because while double pointers are possible to use in shenva,
it dose not support them. this means that if you use double pointer to char for example, you will have
to do all of the conversions yourself.
 
 
[] - the index operator dose the exact same thing as the dereference, but it also adds to the adress the expression
that is putted into it
example:
pInt a = |1, 2, 3|
a[0] - calculates 1
a[1] - calculates 2
a[1 + 1] - calculates 3

when you write - var[1] - it translates to ^(var + (1 * pointer type of var)).
the pointer type of var is determiend by the way var was declared. if var is declared useing pChar
or pBool, it will be 1, sience they are the only pointers wich points to a 1 byte slot.
however if you are using a different decleration it will always be 4, meaning that basiclly there is no difference 
between an int and a pInt other then the decleration capabillites of set list(|expression list|) and uninitiallized list ([number]).

this can also be stacked, like this: var[0][1] wich will translate to: ^(^(var + 0 * type of var) * type of var).
again, not very safe, and not recommended unless you are using the same pointer type to point to another one
of itself. 






assignment:

once you have a variable, you can alter it's value by assignment of new values.
example:

int var1 = 5
char var2 = 'a'



var1 = 6 - var1 is now 6
var2 = 'b' - var2 is now b
var1 = var1 + 1 - var1 is now 6 + 1 wich means 7.

if you want to use a numeric operator with the assign, you can do that in this manner:

int var1 = 5
var1 += 5 - var1 will now be 10, because this line translates to var1 = var1 + 5

you can use all operators:

+= - append
-= - lower by
*= - multiply
/= - divide
%= - modulu by


when assigning new values to pointers, it is important to distinct the pointr's value,
and the pointed object value, and use dereference where needed.
example:

int var1 = 5
pInt pVar1 = &var1, anotherPTR = 0

anotherPTR = pVar1 - this line makes it so that both pointers are pointing to var1
^anotherPTR += 5 - this derefrences the pointer and adds 5 to var1, making it 10.




print types: 

if we want to print in shenva we can use one of the void types print functions.
there are 4 print functions, and each gets an expression, and treats the result of the expression
as the intended print type.
the print types are:

printInt - treats the expression as an integer, and prints it
printFloat - treats the expression as a float, and prints it
printChar - treats the expression as a char, and prints it
printString - treats the expression as a pChar null terminated string, and prints it



if you use a different type in the expression, it will still treat the expression as the intended type:

printInt('a') - will print the ascii numeric value of the letter 'a' wich is 97

this can lead to undefined behavior, and should be used carefully.

another important thing to know is about printString: it can take an expression, but it can also take an immediate
string such as "hello world!" or |'h', 'e', 'y', 0| and it will print and delete it from memory afterwords.
example:

printString("hello!") - prints hello






if - else statements:

similar to python and othe high-level languages, shenva has if - else statements.
to use an if statemment you can use this format (no one liners!):

if (<expression>)
{
	<code block>
}

the if statement calculate the expression, and will enter the code block only if the value is not 0.
here is an example:

if (var1 == 5)
{
	printInt(var1)
}


in this example var1 will be printed only if it is equal to 5.

there are also else statements, wich works similarly, with another set of brackets.
example:
if (var1 == 5)
{
	printInt(var1)
}
else
{
	printString("its not 5!")
}

in this example if var1 is 5, then the program will print 5, but if not it will print "its not 5!".
also you can use "else if" for more specific cases:


if (var1 == 5)
{
	printInt(var1)
}
else if (var == 10)
{
	printString("its 5 + 5!")
}
else
{
	printString("its not 5!")
}


in this example if var1 is 5 then 5 will be printed, but if not, the compiler will check if var1 is 10.
if yes then print "its 5 + 5!" and if not, it will go to the else statement and print "its not 5!".
if else statements can be stacked, meaning you can have as many specific cases as you want.


while loops:
very similar to a lot of programming languages, shenva uses while loops.
the structure of a while loop in shenva is as follows:

while (<expression>)
{
	<blocks>
}

just like in c, while loops get an expression (should probobly be a boolean or logical expression)
and as long as the result is not 0, the blocks of code inside the scope brackets, will be run.

example:
while (var != 0)
{
	printInt(var)
	var = intInput()
}


in this example, as long as var is not 0, the var will be printed, and the get the input from
the user.


for loops:
for loops are very similar to while loops, but they allow to decide a fixed number of itterations.
for loops get 2 parameters. they get a stop condition, and also an end itteration statement.
they look like this:

for (<expression>, <expression>)
{
	<blocks>
}

the first expression is the stop condition, and the loop will run as long as this expression
isn't 0. the second one is the end itteration statement and will happen agt the end of each itteration.

example:

int i = 0
for (i < 21, i += 1)
{
	printInt(i)
	printChar('\n')
}


in this example, the loop prints all numbers from 0 to 20.








functions:

a function is a block of code that can be called from another one. it has it's own scope
and it can return a value.

here is how functions should look like:


def <function name>(<argument list>)
{
	<blocks>
	
	<return> <expression> - optional.
}



a function gets a name, and parameter list at the top.
the paramater list will be defined in the function call.
the call should look like this:

<function name>(<paramater list>)

function calls are expressions, and their value will be the value of the expression of the return.
if there is no return, the value will be 0.
another thing about retutns, is that they can be everywhere in the function, and there can be more than
one. but once a return has been reached, the function will close, and the value will be returned.

here are some function examples:



def printHi()
{
	printString("Hi\n")
	
}

printHi()


this program will call the function and print hi.




def sum(int num1, int num2)
{
	return num1 + num2
}

printInt(sum(5, 5))

this program will call the function with the parameters 5 and 5. the function will add them and return
the result for printing.



scopes:
a scope is every instance that is between 2 brackets.
every loop, if statement and function has a scope, and they all have their own memory. meaning
you cant access variables that were created in a certien scop outside that scope.


example:



def printFive()
{
	int a = 5
	printInt(a)
}

def printSix()
{
	int a = 6 - this will not result in an error, because the variable a, is in different scopes
	printInt(a)
}



if a scope is within another scope, it's part of it, and new variables cannot be created in it with the
same name.
example:


int a = 5
if (True)
{
	int a = 5 - this will result in a semantic error, because a is already defined.
}

the global scope is the first one. meaning that if you make a global variable, you cannot
recreate it anywhere in the program.


to sum up:


we hope these rules and examples will help you be a better shenva programmer.
this version of shenva is shenva 1.0.0, and will probobly be updated, so stay tuned.

vegam, Lemi shemedaber Ivrit, Yesh OD derech LIchTov BEShenva, aval TenaSu lHAvin
Et Ze LevaD 





